{"version":3,"mappings":"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","names":["App","jsx","jsxs","Outlet","getTopCharacters","characters","top","BASE_PATH","Configuration","configuration","querystring","apiKey","accessToken","DefaultConfig","_BaseAPI","__publicField","url","init","fetchParams","middleware","response","e","FetchError","middlewares","next","preMiddlewares","pre","postMiddlewares","post","mime","context","initOverrides","ResponseError","headers","key","initOverrideFn","initParams","overriddenInit","body","isFormData","isBlob","constructor","BaseAPI","value","msg","cause","RequiredError","field","params","prefix","querystringSingleKey","part","keyPrefix","fullKey","multiValue","singleValue","valueAsArray","JSONApiResponse","raw","transformer","jsonValue","CharacterLocationFromJSON","json","CharacterLocationFromJSONTyped","ignoreDiscriminator","CharacterOriginFromJSON","CharacterOriginFromJSONTyped","CharacterFromJSON","CharacterFromJSONTyped","FetchAllCharacters200ResponseInfoFromJSON","FetchAllCharacters200ResponseInfoFromJSONTyped","FetchAllCharacters200ResponseFromJSON","FetchAllCharacters200ResponseFromJSONTyped","DefaultApi","runtime.BaseAPI","queryParameters","headerParameters","runtime.JSONApiResponse","requestParameters","runtime.RequiredError","fetchCharacters","fetchCharacter","ConfigContext","createContext","ConfigProvider","children","cfg","Characters","lazy","CharacterDetails","router","createHashRouter","ReactDOM","React","RouterProvider"],"ignoreList":[],"sources":["../../src/App.tsx","../../src/utils/CharactersProcessor.ts","../../lib/rick-and-morty-api-client/runtime.ts","../../lib/rick-and-morty-api-client/models/CharacterLocation.ts","../../lib/rick-and-morty-api-client/models/CharacterOrigin.ts","../../lib/rick-and-morty-api-client/models/Character.ts","../../lib/rick-and-morty-api-client/models/FetchAllCharacters200ResponseInfo.ts","../../lib/rick-and-morty-api-client/models/FetchAllCharacters200Response.ts","../../lib/rick-and-morty-api-client/apis/DefaultApi.ts","../../src/loaders/CharacterLoader.ts","../../src/context/ConfigContext.tsx","../../src/main.tsx"],"sourcesContent":["import React from 'react';\nimport { Outlet } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <div>\n      <div className=\"bg-white rounded-lg shadow-sm p-4 mb-4\">\n        <h1 className=\"text-xl font-bold text-center\">🚀 Rick and Morty - Fan Service [{__APP_VERSION__}]</h1>\n      </div>\n      <Outlet />\n    </div>\n  );\n};\n\nexport default App;\n","import { Character } from '../../lib/rick-and-morty-api-client';\n\nexport function getTopCharacters(characters: Character[], top: number): Character[] {\n  return characters.slice(0, top);\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Rick and Morty API\n * API for fetching character information from Rick and Morty series\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport const BASE_PATH = \"https://rickandmortyapi.com/api\".replace(/\\/+$/, \"\");\n\nexport interface ConfigurationParameters {\n    basePath?: string; // override base path\n    fetchApi?: FetchAPI; // override for fetch implementation\n    middleware?: Middleware[]; // middleware to apply before/after fetch requests\n    queryParamsStringify?: (params: HTTPQuery) => string; // stringify function for query strings\n    username?: string; // parameter for basic security\n    password?: string; // parameter for basic security\n    apiKey?: string | Promise<string> | ((name: string) => string | Promise<string>); // parameter for apiKey security\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string | Promise<string>); // parameter for oauth2 security\n    headers?: HTTPHeaders; //header params we want to use on every request\n    credentials?: RequestCredentials; //value for the credentials param we want to use on each request\n}\n\nexport class Configuration {\n    constructor(private configuration: ConfigurationParameters = {}) {}\n\n    set config(configuration: Configuration) {\n        this.configuration = configuration;\n    }\n\n    get basePath(): string {\n        return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;\n    }\n\n    get fetchApi(): FetchAPI | undefined {\n        return this.configuration.fetchApi;\n    }\n\n    get middleware(): Middleware[] {\n        return this.configuration.middleware || [];\n    }\n\n    get queryParamsStringify(): (params: HTTPQuery) => string {\n        return this.configuration.queryParamsStringify || querystring;\n    }\n\n    get username(): string | undefined {\n        return this.configuration.username;\n    }\n\n    get password(): string | undefined {\n        return this.configuration.password;\n    }\n\n    get apiKey(): ((name: string) => string | Promise<string>) | undefined {\n        const apiKey = this.configuration.apiKey;\n        if (apiKey) {\n            return typeof apiKey === 'function' ? apiKey : () => apiKey;\n        }\n        return undefined;\n    }\n\n    get accessToken(): ((name?: string, scopes?: string[]) => string | Promise<string>) | undefined {\n        const accessToken = this.configuration.accessToken;\n        if (accessToken) {\n            return typeof accessToken === 'function' ? accessToken : async () => accessToken;\n        }\n        return undefined;\n    }\n\n    get headers(): HTTPHeaders | undefined {\n        return this.configuration.headers;\n    }\n\n    get credentials(): RequestCredentials | undefined {\n        return this.configuration.credentials;\n    }\n}\n\nexport const DefaultConfig = new Configuration();\n\n/**\n * This is the base class for all generated API classes.\n */\nexport class BaseAPI {\n\n    private static readonly jsonRegex = new RegExp('^(:?application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(:?;.*)?$', 'i');\n    private middleware: Middleware[];\n\n    constructor(protected configuration = DefaultConfig) {\n        this.middleware = configuration.middleware;\n    }\n\n    withMiddleware<T extends BaseAPI>(this: T, ...middlewares: Middleware[]) {\n        const next = this.clone<T>();\n        next.middleware = next.middleware.concat(...middlewares);\n        return next;\n    }\n\n    withPreMiddleware<T extends BaseAPI>(this: T, ...preMiddlewares: Array<Middleware['pre']>) {\n        const middlewares = preMiddlewares.map((pre) => ({ pre }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    withPostMiddleware<T extends BaseAPI>(this: T, ...postMiddlewares: Array<Middleware['post']>) {\n        const middlewares = postMiddlewares.map((post) => ({ post }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    protected isJsonMime(mime: string | null | undefined): boolean {\n        if (!mime) {\n            return false;\n        }\n        return BaseAPI.jsonRegex.test(mime);\n    }\n\n    protected async request(context: RequestOpts, initOverrides?: RequestInit | InitOverrideFunction): Promise<Response> {\n        const { url, init } = await this.createFetchParams(context, initOverrides);\n        const response = await this.fetchApi(url, init);\n        if (response && (response.status >= 200 && response.status < 300)) {\n            return response;\n        }\n        throw new ResponseError(response, 'Response returned an error code');\n    }\n\n    private async createFetchParams(context: RequestOpts, initOverrides?: RequestInit | InitOverrideFunction) {\n        let url = this.configuration.basePath + context.path;\n        if (context.query !== undefined && Object.keys(context.query).length !== 0) {\n            // only add the querystring to the URL if there are query parameters.\n            // this is done to avoid urls ending with a \"?\" character which buggy webservers\n            // do not handle correctly sometimes.\n            url += '?' + this.configuration.queryParamsStringify(context.query);\n        }\n\n        const headers = Object.assign({}, this.configuration.headers, context.headers);\n        Object.keys(headers).forEach(key => headers[key] === undefined ? delete headers[key] : {});\n\n        const initOverrideFn =\n            typeof initOverrides === \"function\"\n                ? initOverrides\n                : async () => initOverrides;\n\n        const initParams = {\n            method: context.method,\n            headers,\n            body: context.body,\n            credentials: this.configuration.credentials,\n        };\n\n        const overriddenInit: RequestInit = {\n            ...initParams,\n            ...(await initOverrideFn({\n                init: initParams,\n                context,\n            }))\n        };\n\n        let body: any;\n        if (isFormData(overriddenInit.body)\n            || (overriddenInit.body instanceof URLSearchParams)\n            || isBlob(overriddenInit.body)) {\n          body = overriddenInit.body;\n        } else if (this.isJsonMime(headers['Content-Type'])) {\n          body = JSON.stringify(overriddenInit.body);\n        } else {\n          body = overriddenInit.body;\n        }\n\n        const init: RequestInit = {\n            ...overriddenInit,\n            body\n        };\n\n        return { url, init };\n    }\n\n    private fetchApi = async (url: string, init: RequestInit) => {\n        let fetchParams = { url, init };\n        for (const middleware of this.middleware) {\n            if (middleware.pre) {\n                fetchParams = await middleware.pre({\n                    fetch: this.fetchApi,\n                    ...fetchParams,\n                }) || fetchParams;\n            }\n        }\n        let response: Response | undefined = undefined;\n        try {\n            response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);\n        } catch (e) {\n            for (const middleware of this.middleware) {\n                if (middleware.onError) {\n                    response = await middleware.onError({\n                        fetch: this.fetchApi,\n                        url: fetchParams.url,\n                        init: fetchParams.init,\n                        error: e,\n                        response: response ? response.clone() : undefined,\n                    }) || response;\n                }\n            }\n            if (response === undefined) {\n              if (e instanceof Error) {\n                throw new FetchError(e, 'The request failed and the interceptors did not return an alternative response');\n              } else {\n                throw e;\n              }\n            }\n        }\n        for (const middleware of this.middleware) {\n            if (middleware.post) {\n                response = await middleware.post({\n                    fetch: this.fetchApi,\n                    url: fetchParams.url,\n                    init: fetchParams.init,\n                    response: response.clone(),\n                }) || response;\n            }\n        }\n        return response;\n    }\n\n    /**\n     * Create a shallow clone of `this` by constructing a new instance\n     * and then shallow cloning data members.\n     */\n    private clone<T extends BaseAPI>(this: T): T {\n        const constructor = this.constructor as any;\n        const next = new constructor(this.configuration);\n        next.middleware = this.middleware.slice();\n        return next;\n    }\n};\n\nfunction isBlob(value: any): value is Blob {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\nfunction isFormData(value: any): value is FormData {\n    return typeof FormData !== \"undefined\" && value instanceof FormData;\n}\n\nexport class ResponseError extends Error {\n    override name: \"ResponseError\" = \"ResponseError\";\n    constructor(public response: Response, msg?: string) {\n        super(msg);\n    }\n}\n\nexport class FetchError extends Error {\n    override name: \"FetchError\" = \"FetchError\";\n    constructor(public cause: Error, msg?: string) {\n        super(msg);\n    }\n}\n\nexport class RequiredError extends Error {\n    override name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\nexport type FetchAPI = WindowOrWorkerGlobalScope['fetch'];\n\nexport type Json = any;\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';\nexport type HTTPHeaders = { [key: string]: string };\nexport type HTTPQuery = { [key: string]: string | number | null | boolean | Array<string | number | null | boolean> | Set<string | number | null | boolean> | HTTPQuery };\nexport type HTTPBody = Json | FormData | URLSearchParams;\nexport type HTTPRequestInit = { headers?: HTTPHeaders; method: HTTPMethod; credentials?: RequestCredentials; body?: HTTPBody };\nexport type ModelPropertyNaming = 'camelCase' | 'snake_case' | 'PascalCase' | 'original';\n\nexport type InitOverrideFunction = (requestContext: { init: HTTPRequestInit, context: RequestOpts }) => Promise<RequestInit>\n\nexport interface FetchParams {\n    url: string;\n    init: RequestInit;\n}\n\nexport interface RequestOpts {\n    path: string;\n    method: HTTPMethod;\n    headers: HTTPHeaders;\n    query?: HTTPQuery;\n    body?: HTTPBody;\n}\n\nexport function querystring(params: HTTPQuery, prefix: string = ''): string {\n    return Object.keys(params)\n        .map(key => querystringSingleKey(key, params[key], prefix))\n        .filter(part => part.length > 0)\n        .join('&');\n}\n\nfunction querystringSingleKey(key: string, value: string | number | null | undefined | boolean | Array<string | number | null | boolean> | Set<string | number | null | boolean> | HTTPQuery, keyPrefix: string = ''): string {\n    const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);\n    if (value instanceof Array) {\n        const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))\n            .join(`&${encodeURIComponent(fullKey)}=`);\n        return `${encodeURIComponent(fullKey)}=${multiValue}`;\n    }\n    if (value instanceof Set) {\n        const valueAsArray = Array.from(value);\n        return querystringSingleKey(key, valueAsArray, keyPrefix);\n    }\n    if (value instanceof Date) {\n        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n    }\n    if (value instanceof Object) {\n        return querystring(value as HTTPQuery, fullKey);\n    }\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n}\n\nexport function mapValues(data: any, fn: (item: any) => any) {\n  return Object.keys(data).reduce(\n    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),\n    {}\n  );\n}\n\nexport function canConsumeForm(consumes: Consume[]): boolean {\n    for (const consume of consumes) {\n        if ('multipart/form-data' === consume.contentType) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport interface Consume {\n    contentType: string;\n}\n\nexport interface RequestContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n}\n\nexport interface ResponseContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n    response: Response;\n}\n\nexport interface ErrorContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n    error: unknown;\n    response?: Response;\n}\n\nexport interface Middleware {\n    pre?(context: RequestContext): Promise<FetchParams | void>;\n    post?(context: ResponseContext): Promise<Response | void>;\n    onError?(context: ErrorContext): Promise<Response | void>;\n}\n\nexport interface ApiResponse<T> {\n    raw: Response;\n    value(): Promise<T>;\n}\n\nexport interface ResponseTransformer<T> {\n    (json: any): T;\n}\n\nexport class JSONApiResponse<T> {\n    constructor(public raw: Response, private transformer: ResponseTransformer<T> = (jsonValue: any) => jsonValue) {}\n\n    async value(): Promise<T> {\n        return this.transformer(await this.raw.json());\n    }\n}\n\nexport class VoidApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<void> {\n        return undefined;\n    }\n}\n\nexport class BlobApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<Blob> {\n        return await this.raw.blob();\n    };\n}\n\nexport class TextApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<string> {\n        return await this.raw.text();\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Rick and Morty API\n * API for fetching character information from Rick and Morty series\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface CharacterLocation\n */\nexport interface CharacterLocation {\n    /**\n     * \n     * @type {string}\n     * @memberof CharacterLocation\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CharacterLocation\n     */\n    url?: string;\n}\n\n/**\n * Check if a given object implements the CharacterLocation interface.\n */\nexport function instanceOfCharacterLocation(value: object): boolean {\n    return true;\n}\n\nexport function CharacterLocationFromJSON(json: any): CharacterLocation {\n    return CharacterLocationFromJSONTyped(json, false);\n}\n\nexport function CharacterLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): CharacterLocation {\n    if (json == null) {\n        return json;\n    }\n    return {\n        \n        'name': json['name'] == null ? undefined : json['name'],\n        'url': json['url'] == null ? undefined : json['url'],\n    };\n}\n\nexport function CharacterLocationToJSON(value?: CharacterLocation | null): any {\n    if (value == null) {\n        return value;\n    }\n    return {\n        \n        'name': value['name'],\n        'url': value['url'],\n    };\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Rick and Morty API\n * API for fetching character information from Rick and Morty series\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface CharacterOrigin\n */\nexport interface CharacterOrigin {\n    /**\n     * \n     * @type {string}\n     * @memberof CharacterOrigin\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CharacterOrigin\n     */\n    url?: string;\n}\n\n/**\n * Check if a given object implements the CharacterOrigin interface.\n */\nexport function instanceOfCharacterOrigin(value: object): boolean {\n    return true;\n}\n\nexport function CharacterOriginFromJSON(json: any): CharacterOrigin {\n    return CharacterOriginFromJSONTyped(json, false);\n}\n\nexport function CharacterOriginFromJSONTyped(json: any, ignoreDiscriminator: boolean): CharacterOrigin {\n    if (json == null) {\n        return json;\n    }\n    return {\n        \n        'name': json['name'] == null ? undefined : json['name'],\n        'url': json['url'] == null ? undefined : json['url'],\n    };\n}\n\nexport function CharacterOriginToJSON(value?: CharacterOrigin | null): any {\n    if (value == null) {\n        return value;\n    }\n    return {\n        \n        'name': value['name'],\n        'url': value['url'],\n    };\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Rick and Morty API\n * API for fetching character information from Rick and Morty series\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { mapValues } from '../runtime';\nimport type { CharacterLocation } from './CharacterLocation';\nimport {\n    CharacterLocationFromJSON,\n    CharacterLocationFromJSONTyped,\n    CharacterLocationToJSON,\n} from './CharacterLocation';\nimport type { CharacterOrigin } from './CharacterOrigin';\nimport {\n    CharacterOriginFromJSON,\n    CharacterOriginFromJSONTyped,\n    CharacterOriginToJSON,\n} from './CharacterOrigin';\n\n/**\n * \n * @export\n * @interface Character\n */\nexport interface Character {\n    /**\n     * \n     * @type {number}\n     * @memberof Character\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Character\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Character\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Character\n     */\n    species?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Character\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Character\n     */\n    gender?: string;\n    /**\n     * \n     * @type {CharacterOrigin}\n     * @memberof Character\n     */\n    origin?: CharacterOrigin;\n    /**\n     * \n     * @type {CharacterLocation}\n     * @memberof Character\n     */\n    location?: CharacterLocation;\n    /**\n     * \n     * @type {string}\n     * @memberof Character\n     */\n    image?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Character\n     */\n    episode?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Character\n     */\n    url?: string;\n    /**\n     * \n     * @type {Date}\n     * @memberof Character\n     */\n    created?: Date;\n}\n\n/**\n * Check if a given object implements the Character interface.\n */\nexport function instanceOfCharacter(value: object): boolean {\n    return true;\n}\n\nexport function CharacterFromJSON(json: any): Character {\n    return CharacterFromJSONTyped(json, false);\n}\n\nexport function CharacterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Character {\n    if (json == null) {\n        return json;\n    }\n    return {\n        \n        'id': json['id'] == null ? undefined : json['id'],\n        'name': json['name'] == null ? undefined : json['name'],\n        'status': json['status'] == null ? undefined : json['status'],\n        'species': json['species'] == null ? undefined : json['species'],\n        'type': json['type'] == null ? undefined : json['type'],\n        'gender': json['gender'] == null ? undefined : json['gender'],\n        'origin': json['origin'] == null ? undefined : CharacterOriginFromJSON(json['origin']),\n        'location': json['location'] == null ? undefined : CharacterLocationFromJSON(json['location']),\n        'image': json['image'] == null ? undefined : json['image'],\n        'episode': json['episode'] == null ? undefined : json['episode'],\n        'url': json['url'] == null ? undefined : json['url'],\n        'created': json['created'] == null ? undefined : (new Date(json['created'])),\n    };\n}\n\nexport function CharacterToJSON(value?: Character | null): any {\n    if (value == null) {\n        return value;\n    }\n    return {\n        \n        'id': value['id'],\n        'name': value['name'],\n        'status': value['status'],\n        'species': value['species'],\n        'type': value['type'],\n        'gender': value['gender'],\n        'origin': CharacterOriginToJSON(value['origin']),\n        'location': CharacterLocationToJSON(value['location']),\n        'image': value['image'],\n        'episode': value['episode'],\n        'url': value['url'],\n        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),\n    };\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Rick and Morty API\n * API for fetching character information from Rick and Morty series\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface FetchAllCharacters200ResponseInfo\n */\nexport interface FetchAllCharacters200ResponseInfo {\n    /**\n     * \n     * @type {number}\n     * @memberof FetchAllCharacters200ResponseInfo\n     */\n    count?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof FetchAllCharacters200ResponseInfo\n     */\n    pages?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof FetchAllCharacters200ResponseInfo\n     */\n    next?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FetchAllCharacters200ResponseInfo\n     */\n    prev?: string;\n}\n\n/**\n * Check if a given object implements the FetchAllCharacters200ResponseInfo interface.\n */\nexport function instanceOfFetchAllCharacters200ResponseInfo(value: object): boolean {\n    return true;\n}\n\nexport function FetchAllCharacters200ResponseInfoFromJSON(json: any): FetchAllCharacters200ResponseInfo {\n    return FetchAllCharacters200ResponseInfoFromJSONTyped(json, false);\n}\n\nexport function FetchAllCharacters200ResponseInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FetchAllCharacters200ResponseInfo {\n    if (json == null) {\n        return json;\n    }\n    return {\n        \n        'count': json['count'] == null ? undefined : json['count'],\n        'pages': json['pages'] == null ? undefined : json['pages'],\n        'next': json['next'] == null ? undefined : json['next'],\n        'prev': json['prev'] == null ? undefined : json['prev'],\n    };\n}\n\nexport function FetchAllCharacters200ResponseInfoToJSON(value?: FetchAllCharacters200ResponseInfo | null): any {\n    if (value == null) {\n        return value;\n    }\n    return {\n        \n        'count': value['count'],\n        'pages': value['pages'],\n        'next': value['next'],\n        'prev': value['prev'],\n    };\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Rick and Morty API\n * API for fetching character information from Rick and Morty series\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { mapValues } from '../runtime';\nimport type { Character } from './Character';\nimport {\n    CharacterFromJSON,\n    CharacterFromJSONTyped,\n    CharacterToJSON,\n} from './Character';\nimport type { FetchAllCharacters200ResponseInfo } from './FetchAllCharacters200ResponseInfo';\nimport {\n    FetchAllCharacters200ResponseInfoFromJSON,\n    FetchAllCharacters200ResponseInfoFromJSONTyped,\n    FetchAllCharacters200ResponseInfoToJSON,\n} from './FetchAllCharacters200ResponseInfo';\n\n/**\n * \n * @export\n * @interface FetchAllCharacters200Response\n */\nexport interface FetchAllCharacters200Response {\n    /**\n     * \n     * @type {FetchAllCharacters200ResponseInfo}\n     * @memberof FetchAllCharacters200Response\n     */\n    info?: FetchAllCharacters200ResponseInfo;\n    /**\n     * \n     * @type {Array<Character>}\n     * @memberof FetchAllCharacters200Response\n     */\n    results?: Array<Character>;\n}\n\n/**\n * Check if a given object implements the FetchAllCharacters200Response interface.\n */\nexport function instanceOfFetchAllCharacters200Response(value: object): boolean {\n    return true;\n}\n\nexport function FetchAllCharacters200ResponseFromJSON(json: any): FetchAllCharacters200Response {\n    return FetchAllCharacters200ResponseFromJSONTyped(json, false);\n}\n\nexport function FetchAllCharacters200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): FetchAllCharacters200Response {\n    if (json == null) {\n        return json;\n    }\n    return {\n        \n        'info': json['info'] == null ? undefined : FetchAllCharacters200ResponseInfoFromJSON(json['info']),\n        'results': json['results'] == null ? undefined : ((json['results'] as Array<any>).map(CharacterFromJSON)),\n    };\n}\n\nexport function FetchAllCharacters200ResponseToJSON(value?: FetchAllCharacters200Response | null): any {\n    if (value == null) {\n        return value;\n    }\n    return {\n        \n        'info': FetchAllCharacters200ResponseInfoToJSON(value['info']),\n        'results': value['results'] == null ? undefined : ((value['results'] as Array<any>).map(CharacterToJSON)),\n    };\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Rick and Morty API\n * API for fetching character information from Rick and Morty series\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as runtime from '../runtime';\nimport type {\n  Character,\n  FetchAllCharacters200Response,\n} from '../models/index';\nimport {\n    CharacterFromJSON,\n    CharacterToJSON,\n    FetchAllCharacters200ResponseFromJSON,\n    FetchAllCharacters200ResponseToJSON,\n} from '../models/index';\n\nexport interface FetchSingleCharacterRequest {\n    id: number;\n}\n\n/**\n * \n */\nexport class DefaultApi extends runtime.BaseAPI {\n\n    /**\n     * Fetch all characters\n     */\n    async fetchAllCharactersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchAllCharacters200Response>> {\n        const queryParameters: any = {};\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        if (this.configuration && this.configuration.apiKey) {\n            headerParameters[\"Authorization\"] = await this.configuration.apiKey(\"Authorization\"); // ApiKeyAuth authentication\n        }\n\n        const response = await this.request({\n            path: `/character`,\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        }, initOverrides);\n\n        return new runtime.JSONApiResponse(response, (jsonValue) => FetchAllCharacters200ResponseFromJSON(jsonValue));\n    }\n\n    /**\n     * Fetch all characters\n     */\n    async fetchAllCharacters(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchAllCharacters200Response> {\n        const response = await this.fetchAllCharactersRaw(initOverrides);\n        return await response.value();\n    }\n\n    /**\n     * Fetch a single character by ID\n     */\n    async fetchSingleCharacterRaw(requestParameters: FetchSingleCharacterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Character>> {\n        if (requestParameters['id'] == null) {\n            throw new runtime.RequiredError(\n                'id',\n                'Required parameter \"id\" was null or undefined when calling fetchSingleCharacter().'\n            );\n        }\n\n        const queryParameters: any = {};\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        if (this.configuration && this.configuration.apiKey) {\n            headerParameters[\"Authorization\"] = await this.configuration.apiKey(\"Authorization\"); // ApiKeyAuth authentication\n        }\n\n        const response = await this.request({\n            path: `/character/{id}`.replace(`{${\"id\"}}`, encodeURIComponent(String(requestParameters['id']))),\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        }, initOverrides);\n\n        return new runtime.JSONApiResponse(response, (jsonValue) => CharacterFromJSON(jsonValue));\n    }\n\n    /**\n     * Fetch a single character by ID\n     */\n    async fetchSingleCharacter(requestParameters: FetchSingleCharacterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Character> {\n        const response = await this.fetchSingleCharacterRaw(requestParameters, initOverrides);\n        return await response.value();\n    }\n\n}\n","import { getTopCharacters } from '../utils/CharactersProcessor';\nimport { CharacterRouteParams } from '../types/types';\nimport { DefaultApi } from '../../lib/rick-and-morty-api-client';\n\nexport async function fetchCharacters() {\n  const api = new DefaultApi();\n  const response = await api.fetchAllCharacters();\n  return { characters: getTopCharacters(response.results!, 5) };\n}\n\nexport async function fetchCharacter({ params }: CharacterRouteParams) {\n  const api = new DefaultApi();\n  return await api.fetchSingleCharacter({ id: parseInt(params.id) });\n}\n","import React, { createContext, useContext, ReactNode } from 'react';\nimport { Config } from '../types/types';\n\nexport const ConfigContext = createContext<Config>({} as Config);\n\ninterface ConfigProviderProps {\n  children: ReactNode;\n}\n\nexport const ConfigProvider = ({ children }: ConfigProviderProps) => {\n  const cfg: Config = {\n    appVersion: __APP_VERSION__,\n  };\n\n  return <ConfigContext.Provider value={cfg}>{children}</ConfigContext.Provider>;\n};\n\nexport const useConfig = (): Config => {\n  const context = useContext(ConfigContext);\n  if (context === undefined) {\n    throw new Error('useConfig must be used within a ConfigProvider');\n  }\n  return context;\n};\n","import React, { lazy } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { RouterProvider, createHashRouter } from 'react-router-dom';\nimport App from './App';\nimport { fetchCharacter, fetchCharacters } from './loaders/CharacterLoader';\nimport { CharacterRouteParams } from './types/types';\nimport { ConfigProvider } from './context/ConfigContext';\n\nconst Characters = lazy(() => import('./pages/Characters'));\nconst CharacterDetails = lazy(() => import('./pages/CharacterDetails'));\n\nconst router = createHashRouter([\n  {\n    path: '/',\n    element: <App />,\n    children: [\n      {\n        index: true,\n        loader: fetchCharacters,\n        element: <Characters />,\n      },\n      {\n        path: 'character/:id',\n        loader: async ({ params }) => {\n          return fetchCharacter({ params } as CharacterRouteParams);\n        },\n        element: <CharacterDetails />,\n      },\n    ],\n  },\n]);\n\nReactDOM.createRoot(document.getElementById('app') as HTMLElement).render(\n  <React.StrictMode>\n    <ConfigProvider>\n      <RouterProvider router={router} />\n    </ConfigProvider>\n  </React.StrictMode>,\n);\n"],"file":"assets/index-nJS5IBD4.js"}